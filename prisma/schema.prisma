datasource db{
    provider ="postgresql"
    url = env("DATABASE_URL")
}
generator client {
  provider      = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

model User{
    id Int @id @default(autoincrement()) 
    // 아이디  중복불가
    
    userName String? @unique 
    password String? // 패스워드
    nickName String  @unique // 사용자 닉네임 중복불가
    email String @unique// 사용자 이메일
    //PhoneNumber String?  // 사용자 핸드폰 번호
    avatar String?  //프로필 사진
    bio String? // 자기소개
    // authUser AuthUser? // 1-1 relations
    gender String?  //성별
    ageRange String? //나이대
    createdAt DateTime @default(now()) // 가입날짜
    updatedAt DateTime @updatedAt  // 업데이트 날짜
    reviews Review[]
    comments Comment[]
    platformType String?
    suggestions Suggestion[]
    
    
}

// RefreshToken 폐기목록 
model Token{
    id Int @id @default(autoincrement())
    token String 
    createdAt DateTime @default(now()) //생성날짜
}


model Suggestion{
    id Int @id @default(autoincrement()) 
    like Boolean @default(false)
    unLike Boolean @default(false)
    //placeId Int
    //place Place @relation(fields: [placeId],references:[id])
    reviewId Int
    review Review @relation(fields:[reviewId], references:[id],onDelete:Cascade,onUpdate:Cascade)
    userId Int
    user User @relation(fields: [userId],references:[id],onDelete:SetDefault,onUpdate:Cascade)
    createdAt DateTime @default(now()) //생성날짜
    updatedAt DateTime @updatedAt  // 업데이트 날짜
    @@unique([reviewId,userId])
}
model ReviewRoom{
    id Int @id @default(autoincrement()) 
    createdAt DateTime @default(now()) //생성날짜
    updatedAt DateTime @updatedAt  // 업데이트 날짜
    review Review[]
}
model Review{
    id Int @id @default(autoincrement()) 
    createdAt DateTime @default(now()) //생성날짜
    updatedAt DateTime @updatedAt  // 업데이트 날짜
    title String
    content String
    upload String? 
    userId Int 
    //...
    user User @relation(fields: [userId],references:[id],onUpdate: Cascade,onDelete:Cascade)
    comments Comment[] 
    suggestions Suggestion?
    placeId Int @default(0)
    //...,on
    place Place @relation(fields: [placeId],references:[id],onUpdate:Cascade,onDelete:SetDefault)
    //리뷰 맵핑용
    reviewRoomId Int?
    reviewRoom ReviewRoom? @relation(fields: [reviewRoomId],references:[id],onUpdate:Cascade,onDelete:Cascade)
    hashtags HashTag[]
    
}
model Place{
    id Int @id @default(autoincrement()) 
    createdAt DateTime @default(now()) //생성날짜
    updatedAt DateTime @updatedAt  // 업데이트 날짜
    title String //장소이름
    address String //주소 (도로명주소?번지주소?)
    zipCode Int? //우편번호
    x Float //x좌표
    y Float //y좌표
    category String?
    uniqueId String @unique
    //userId Int //장소 등록자    
    // user User @relation(fields: [userId],references:[id],onDelete:Cascade,onUpdate: Cascade)
    //suggestions Suggestion?
    
    reviews Review[] 
    //@@unique([userId])
}
model Comment{
    id Int @id @default(autoincrement()) 
    createdAt DateTime @default(now()) //생성날짜
    updatedAt DateTime @updatedAt  // 업데이트 날짜
    payload String
    reviewId Int
    userId Int
    hashtags HashTag[]
    user User @relation(fields: [userId],references:[id]) //유저 연결
    review Review @relation(fields: [reviewId],references:[id])
    // hashtags HashTag[]
    
}
model HashTag{
    id Int @id @default(autoincrement()) 
    hashtag String @unique
    comments Comment[] //connectORCreate
    reviews Review[]  //connectORCreate
    createdAt DateTime @default(now()) //생성날짜
    updatedAt DateTime @updatedAt  // 업데이트 날짜
}

// model AuthUser{
//     id Int @id @default(autoincrement()) 
//     userId Int 
//     user User @relation(fields: [userId],references:[id])
//     oauth_provider String  // 공급자
//     accessToken String  
//     refreshToken String
//     createdAt DateTime @default(now()) // 가입날짜
//     updatedAt DateTime @updatedAt  // 업데이트 날짜
// }